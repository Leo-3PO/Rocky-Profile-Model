= Hiro-Model

C++ Implementation of Hiro Matsumoto's Shore Platform Numerical Model

The Hiro object is the exploratory morphodynamic model developed by http://www.sciencedirect.com/science/article/pii/S0169555X16303385[Matsumoto et al. (2016a)] and http://www.bioone.org/doi/10.2112/SI75-120.1[Matsumoto et al. (2016b)].

This version was developed for coupling to predictions of cosmogenic isotope concentrations using the https://github.com/mdhurst1/RoBoCoP_CRN/[RoBoCoP_CRN] model developed by http://www.pnas.org/content/113/47/13336.abstract[Hurst et al. (2016)] and http://www.earth-surf-dynam.net/5/67/2017/[Hurst et al. (2017)].

This code is made available on a GNU General Public License (see LICENSE in repository). Please cite the following papers when using or refering to this model:

Matsumoto, H., Dickson, M.E., and Kench, P.S., 2016a, An exploratory numerical model of rocky shore profile evolution: Geomorphology, v. 268, p. 98â€“109, doi: http://dx.doi.org/10.1016/j.geomorph.2016.05.017[10.1016/j.geomorph.2016.05.017].

Matsumoto, H., Dickson, M.E., and Kench, P.S., 2016b, Modelling the Development of Varied Shore Profile Geometry on Rocky Coasts: Journal of Coastal Research, v. 75, no. sp1, p. 597â€“601, doi: http://dx.doi.org/10.2112/SI75-120.1[10.2112/SI75-120.1].

== Update notes 9/6/2018
Changes made in updated C++ code in “Hiro_v2_CRN_Driver.cpp”, “Hiro.hpp” and “Hiro.cpp”
1) In the updated model, wave height decays exponentially, similar to the way used in Trenhaile’s models. The updated model still considers unbroken, breaking, and broken waves and used different scaling coefficients (of wave pressure) for these three waves. This is in order to represent the force different of different waves (i.e. breaking > broken > unbroken wave force). The other change regarding different wave types is that breaking wave distance varies dynamically depending on a submarine slope. In general, steeper the submarine slope, shorter the breaking wave distance. Please see the wave versus weathering paper, in particular section 2.1 and Fig. 1.
In the C++ code, the following functions are added.
-	CalculateBackwearing_v1(WaveAttenuConst)
-	CalculateDownwearing_v1(WaveAttenuConst)
where WaveAttenuConst is a rate of exponential decay of breaking and broken waves.


2) The modified C++ code allows to us change sea level rise/fall rates multiple times. Main variables added and controlling the new function are “SLRT” and “SLR” (at Line 129 and 130 in Hiro_v2_CRN_Driver.ppt). SLRT contains a number of years at which sea level rise/fall rate change, and SLR contains a number of rates at which sea level rises or falls. 
For example, when SLRT = {50,100}, SLR={0.1,-0.1}, sea level rises at a rate of 0.1m/year between 0 and 50 years and sea level falls at a rate of 0.1m/year between 50 and 100 years. In Hiro_v2_CRN_Driver.ppt, a very small numbers (0.00000000001) are used in order to simulate situations where no sea level rise/fall rate change. This is because, when “0” is used results are strange. So I temporarily used a very small number.
In the C++ code, the following function is added.
-	UpdateSeaLevel_v1(double InputSeaLevel)


3) The modified C++ code allows us to consider tectonic uplift/subsidence events. Main variables added and controlling the new function are “TT” and “UpliftAmplitude” (at Line 136 and 137 in Hiro_v2_CRN_Driver.ppt). TT contains a number of years at which a modeled profile is uplifted/downlifted, and UpliftAmplitude contains an amount of tectonic uplift/downlift. 
In the C++ code, the following function is added.
-	TectonicUplift(double UpliftAmplitude)


